.\" Copyright (c) 1994-1997 Daimler-Benz Aerospace / Space Systems Group
.\" Copyright (c) 1998-2012 O. Kellogg <okellogg@users.sourceforge.net>
.\" See section COPYING for conditions for redistribution
.TH as1750 1 "03 Jan 1997" "Dasa/SpaceGroup" "MIL-STD-1750 Development Tools"
.nh

.SH NAME
as1750 \-\- macro assembler and linker for cross\-gcc outputs.

.SH SYNOPSIS
.B as1750
[\|\c
.B \-a\c
\||\|\c
.B \-al\c
\||\|\c
.B \-ar\c
\||\|\c
.B \-as\c
\|]
.RB "[\|" \-D\c
.I macro_symbol\c
\&[\|\c
.B \=\c
.I value\c
\&\|]\|]
.RB "[\|" \-I\c
.I path\c
\&\|]
.RB "[\|" \-o 
.I loadfile\c
\&\|]
.RB "[\|" \-c\c
.I hexaddr\c
\&\|]
.RB "[\|" \-k\c
.I hexaddr\c
\&\|]
.RB "[\|" \-s\c
.I hexaddr\c
\&\|]
.RB "[\|" \-t\c
.IR address\c
\&\|]
.RB "[\|" \-C\c
.IR mainname\c
\&\|]
.RB "[\|" \-S "\|]"
.RB "[\|" \-u "\|]"
.RB "[\|" \-v "\|]"
.I files\c
\&\|.\|.\|.

.SH DESCRIPTION
.B as1750\c
\& is primarily intended to assemble the output of the GNU C
compiler \c
.I gcc\c
\& configured as a cross compiler to the MIL\-STD\-1750 (A or B)
instruction set. The loadfile generated by
.B as1750
is either in Tektronix Extended Hex or in TLD Load Module format.
.sp
Each time you run \c
.B as1750\c
\&, it produces one absolute loadable output file.
There is no separate linker, and no object files are produced.
Therefore, all source files constituting the entire program must
be submitted to assembly on each invocation.
.sp
.B as1750\c
\& may write warnings and error messages to the standard error
file (usually your terminal).  This should not happen when \c
.B as1750\c
\& is
run automatically by a compiler.  Warnings report an assumption made so
that \c
.B as1750\c
\& could keep assembling a flawed program; errors report a
grave problem that stops the assembly.

In
.B as1750\c
, four sections exist:
.I Init
(initialization section),
.I Normal
(executable program code),
.I Konst
(read\-only constants), and
.I Static
(read/write data space.)
The Init section functions to collect executable code that copies all data
in the Konst section to the Static section before the main program begins.
The 1750 code generated by the cross\-gcc compiler is structured accordingly.

.SH OPTIONS
.TP
.RB "[\|" \-a "\||\|" \-al "\||\|" \-ar "\||\|" \-as "\|]"
.br
Turn on assembly listings; \|\c
.B \-al\c
\&\|, listing before relocation only, \|\c
.B \-ar\c
\&\|, listing after relocation only, \|\c
.B \-as\c
\&\|, symbols only, \|\c
.B \-a\c
\&\|, everything.
.TP
.BI \-D\| "macro_symbol" \|[\=\| "value" \|]
.br
Define a macro symbol (and initialize it to
.I value\c
, if any supplied.)
.TP
.BI \-I\| "path"
.br
Add 
.I path
to the search list for 
.B INCLUDE
directives. The order in which
.B as1750
searches for include files is: first in the current working directory;
if not found then in the directory given by the
.B \-I
command\-line option; if still not found, then in the directory indicated 
by the environment variable
.B AS1750_INC_PATH,
if such is defined.
.TP
.BI \-o\| loadfile
Gives the output loadfile an explicit name and selects the loadfile
format. If the loadfile name given ends in ".hex", then the Tektronix 
Extended Hex format is selected. If the name ends in ".ldm", then the 
TLD Load Module format is selected. Other extensions are illegal.
.br
If this option is not supplied, then the name is the proper
name of the first input file on the command line (less its
.I \.s
extension), with the extension 
.I \.ldm
added. (Thus, the default loadfile format is TLD LDM.)
.TP
.BI \-c\| hexaddr
Use 
.I hexaddr
as the start address for all code. During linking, all pieces of the 
Init (initialization) section are relocated first. The code of the 
Normal section is then placed after the end of the Init section.
If this option is not supplied, the code start address defaults to
hex 0100.
.TP
.BI \-k\| hexaddr
Use
.I hexaddr
as the start address for the Konst (read\-only data) section.
If this option is not supplied, then the Konst section starts just after
the end of the Normal section.
.TP
.BI \-s\| hexaddr
Use
.I hexaddr
as the start address for the Static (read\-write data) section.
If this option is not supplied, the Static section begins just after the 
end of the Konst section.
.TP
.BI \-t\| address
Use the given
.I address
(in hexadecimal) as the transfer address of the program. The transfer 
address is the address at which the program begins. If this option is not
supplied, the transfer address defaults to the beginning of the Init
section. If the Init section is empty, then the transfer address defaults
to the beginning of the Normal section.
.br
If the
.B \-t
option is not supplied, the transfer address defaults to the start address
of the Init section. Under normal circumstances, this default should
.B not
be changed (i.e. this option need not be used.)
.TP
.BI \-C\| mainname
Generate a call envelope for the main program named
.I mainname.
E.g., if the 
.I mainname
given is
.B main,
then the call envelope is following code:
.sp
.RB "       " "sjs r15,main"
.br
.RB "       " "br  0"
.sp
This feature is useful when execution of the return instruction (URS) of
the main program leads into an undefined call site.
.TP
.B \-S
Make the assembler case sensitive for symbol names. (By default, the assembler
is entirely case insensitive.)
.TP
.B \-u
Switches the assembler to permissive mode for external references.
In as1750 native mode (without
.B -u
), references to external global symbols must be explicitly declared by a
GLOBAL or IMPORT statement.  The 
.B -u
flag removes this restriction, i.e. symbols that could not be resolved locally
are assumed to be external.
.TP
.B \-v
Announce 
.B as1750
version.
.TP
.I files\|.\|.\|.
Source files to assemble 

.PP
Options may be in any order, and may be before, after, or between file names.  
The order of input file names is significant: in the absence of explicit 
ORG statements, code is generated at ascending addresses in the order in which 
files appear on the command line, left to right.

Any command line argument that begins with a hyphen (\`\|\c
.B \-\|\c
\') is an option.  Each option changes the behavior of
.B as1750\c
\&.  No option changes the way another option works.  An
option is a \`\|\-\|\' followed by one or more letters; the case of
the letter is important.   All options are optional.

At options that require a further parameter, the parameter may either
immediately follow the option letter, or the parameter may be separated
from the option letter by whitespace. For example, to define the macro symbol
\`\|M_IO_INT\|\' to have the value \`\|1\|\' at assembler invocation,
the \-D option may be given as:
.br
.BR "        \-DM_IO_INT\=1"
.br
or as:
.br
.BR "        \-D M_IO_INT\=1"
.br
with no spaces after the \`\|D\|\' or at either side of the \`\|\=\|\'.


.SH ASSEMBLER SYNTAX

Assembler source lines can be empty lines, comment lines, or 
operation lines.
.br

A comment line looks like this:
.br
.B "       " ;
[\|\c
.I comment\c
\|]
.br
The \`\|\c
.B ;\|\c
\' comment introducer may appear in any column of the line.
.br

An operation line looks like this:
.br
.BR "        " [\|\c
.IR label "\|]  [\|" \c
.IR operation "  [\|" \c
.IR operands "\|]\|]  [\|" \c
.BR " ; " "[\|" \c
.I comment\c
\|]\|]
.br

The
.I label
field, if present, must begin in column 1, and introduces the declaration 
of a symbol or label. The
.I operation
field, on the other hand, must begin in a column greater than 1, and can
be an assembler directive or a MIL-STD-1750 instruction mnemon. If the
operation requires parameters, these are given in the
.I operand
field.
.sp
Discrete numeric constants are interpreted as signed 16-bit decimal integers. 
.sp
If the constant is prefixed by
.B #
or
.BR 0x ","
then it is interpreted as an unsigned 16-bit hexadecimal 
.sp
If the constant begins with
.BR 0 ","
it is interpreted as an unsigned 16-bit octal number. 
.sp
If the constant is prefixed by
.BR @ ","
then it is interpreted as an unsigned 16-bit integer in binary 
(twos-complement) notation.  E.g. 
.BR 0x1B " can also be written as " 033 " or " @11011.
.sp
Integer constants may also be given as ASCII character values as in the C 
language. For example,
.BR \'\|A\|\'
corresponds to an integer value of 65.
.sp
In
.B as1750\|\c
\, the operation field and all MIL-STD-1750 predefined names (register and 
condition-code names, XIO mnemons, etc.), are case insensitive. Case 
sensitivity of labels and symbol names is controlled by the command line
switch
.B \-S.

.SH ADDRESS EXPRESSIONS

In the address field of a 1750 instruction, as well as in DATA statements, there 
may appear a single item, or a sum or difference of exactly two items. An item 
can be either a numeric constant, or an address label. 
.sp
Macro symbols and EQU defined symbols may also appear in address expressions. 
Since their values are immediately determinable, these fall under the category 
of numeric constants. As a special case, address labels within ORGed pieces of 
code are also treated as constants, as their values are known 
.I prior to relocation. 
The values of relocated (i.e. non-ORGed) address labels, on the other hand, are 
known only 
.I after 
relocation.
.sp
Here are examples of the valid forms of address expressions in the address field
of a 1750 instruction. In the examples,
.I label
stands for an address label, and
.I constant
stands for either an immediate integer value, a macro symbol, or an EQU defined
(constant) symbol.
.sp
.RB "        LIM R0, " constant
.br
.RB "        LIM R0, " label
.br
.RB "        LIM R0, " constant\|+\|constant
.br
.RB "        LIM R0, " constant\|-\|constant
.br
.RB "        LIM R0, " label\|+\|constant
.br
.RB "        LIM R0, " label\|-\|constant
.br
.RB "        LIM R0, " constant\|+\|label
.br
.RB "        LIM R0, " label\|-\|label
.sp
In the last example, subtraction of two labels, both of the relocatable-address
labels must be defined in the same section. Again, all these expression forms
may also appear at the right hand side of DATA directives (for an explanation
of the DATA directive, see DIRECTIVES.)


.SH DIRECTIVES

The following directives are implemented in 
.B as1750
:
.br
.TP
.BI INCLUDE "  filename"
.br
Read in and assemble the given file before continuing with the current file.
.TP
.BI INIT
.br
Switch to the Init section
.TP
.BI NORMAL
.br
Switch to the executable program code section
.TP
.BI KONST
.br
Switch to the read\-only constants section
.TP
.BI STATIC
.br
Switch to the read\-write data section
.TP
.IB symbol "  EQU  " value
.br
Define 
.I symbol
to have the given numeric 
.I value\c
\&. The symbol name must appear in column 1 of the line.
.br
Note that the EQU statement is primitive in that only exactly one 
integer constant or macro symbol value can be assigned to the symbol.
It is mainly provided for compatibility with older assemblers.
.br
The
.B SET
macro preprocessing directive is much more powerful, in that it 
manipulates full arithmetic, logic, and string expressions.
.TP 
.BI GLOBAL "  label"
.br
Globalize the given label. If the label is defined in the same file,
then this is an \`export\' declaration. If the label is defined in
another file, then this is an \`import\' declaration.
.TP
.BI COMMON "  label " [\|,\| "size" \|]
.br
Declare a global common block to be located at the given label. This 
is similar to the GLOBAL declaration, with the added feature of the 
optional
.I size
argument. The assembler will reserve the largest of the size arguments
given in different files. If no size is mentioned in any file, then
the reserved size is one word.
.TP
.IB "[\|label\|]  " DATA "  address_expression"
.br
Reserve the next vacant word in the current section, and initialize it
with the given expression.
For an explanation of valid
.I address_expression\|\c
s, see above paragraph ADDRESS EXPRESSIONS. Only the
.B DATA
directive permits address expressions as its arguments, whereas the 
DATAL/DATAF/DATAEF/DATAC directives take only simple values as arguments.
.br
Several values separated by commas may be given in the same DATA
/DATAL/DATAF/DATAEF/DATAC directive, in which case the values are placed 
in consecutive memory locations.
.TP
.IB "[\|label\|]  " DATAL "  longval"
.br
Reserve the next vacant two words in the current section, 
and store the double precision integer constant
.I longval
in them. This is the only directive in which the constants given are
interpreted as 32-bit numbers (instead of 16-bit.)
.TP
.IB "[\|label\|]  " DATAF "  fltval"
.br
Reserve the next vacant two words in the current section, 
and store the floating point constant
.I fltval
in them.
.TP
.IB "[\|label\|]  " DATAEF "  efltval"
.br
Reserve the next vacant three words in the current section, 
and store the extended precision floating point constant
.I efltval
in them.
.TP
.IB "[\|label\|]  " DATAC "  [\|string | charval\|]"
.br
Pack the givens string(s) and/or numeric character value(s) into 
consecutive words. Strings are delimited by quotation marks (").
Packing proceeds such that the first character is put in the high 
byte of the first word, the second character is put in the low 
byte of the first word, the third character is in the high byte of 
the second word, the fourth character is in the low byte of the 
second word, and so forth. Note that if an odd number of characters 
is given, then the less significant byte of the last word contains 
the ASCII NUL character.
.TP
.IB "[\|label\|]  " BLOCK "  size"
.br
Reserve the next vacant \`\|\c
.I size\c
\|\' words in the current section, and initialize them with zeroes.
.TP
.IB "[\|label\|]  " ORG "  start_address"
.br
Instruct the linker to place the following code at the given
.I start_address. 
.br
No relocation of the following code or data occurs. The ORG directive 
remains in effect for the section in which it appears until either an
.B UNORG
directive is encountered, a further ORG directive is encountered, a
switch of section occurs, or a RESUME statement occurs. If the optional
.I label
is supplied, then assembly of code in the current ORG fragment may later
be continued via the RESUME statement.
.TP
.B UNORG
.br
Instructs the linker to revert back to normal relocation mode (after an
ORG directive.)
.TP
.BI "RESUME " label
.br
A switch is performed to the previously defined ORG code fragment that
was labelled with the
.I label
name given. I.e. the code following the RESUME statement is placed in
the section in which the
.I label
was defined, and at the address one higher than the last word previously
assembled in the ORG code fragment of the given label. Instead of
a label name, one of the four section names may be given. In that case,
the RESUME <section_name> directive is equivalent to the simple
<section_name> switch. For example, RESUME KONST is equivalent to
just KONST.
.TP
.BI "IF  " condition
.br
.BI "{ ELSEIF  " condition " }"
.br
.B ELSE
.br
.B ENDIF
.sp
These directives provide for conditional assembly. If the
.I condition
in the IF or ELSEIF statement evaluates to zero, then the IF dependent 
statements up to the ELSE or ENDIF directive are skipped.
If it evaluates to unequal zero, then the dependent block of statements 
is assembled. If the following conditional directive is ELSE, then
the statements in the ELSE part are assembled if the original condition was
\= 0, or are skipped if the original condition was !\= 0.
.br
Conditional assembly blocks may be nested.
.br
If the expression is other than an integer constant or
a single label, then it must be a macro expression (see following section
MACRO SYMBOLS.) The IF directive is particularly useful in combination
with the built\-in function 
.B DEF()
and the
.B \-D
command line option for defining macro symbols. Thus,
.br
.RB "        IF DEF(M_IO_INT)"
.br
.RB "            \.\.\."
.br
.RB "        ENDIF"
.br
, given that the symbol M_IO_INT is not defined in the file, would 
cause assembly of the statement(s) at \`\|\.\.\.\|\' only when the 
assembler is invoked with \`\|\c
.B \-DM_IO_INT\|\'.
.TP
.BI "WHILE  " condition
.br
.IR "      statements"
.br
.BR "ENDWHILE"
.sp
For as long as
.I condition
evaluates to unequal zero, assemble the
.I statements.
For
.I condition,
the same syntax rules apply as for the condition of an IF statement.
WHILE loops may be nested to a depth of 16. However, care must be taken 
that all loops be finite, i.e. that the loop condition evaluates to 0 
at some point.  Otherwise, a segmentation fault ensues.


.SH MACRO SYMBOLS
.sp
Macro symbols and directives are expanded by a text preprocessing
phase prior to assembly.  The assembler proper (at least in concept)
never actually \`sees\' any of the macro features.
.sp
Macro symbols are defined by the SET directive. 
Thus, the line
.br
.IB "        macrosym  " SET "  expression"
.br
defines the macro symbol
.I macrosym
to contain the result of the (immediately evaluated)
.I expression.
(Notice that
.I macrosym
occupies the \`label field\' of the line and therefore
must begin in the first column.)
.sp
The result type may be either integer or string.
The operands of the right-hand side expression may be of boolean,
integer, or string type. Boolean expressions evaluate to integer value
0 for FALSE and 1 for TRUE. All integer arithmetic and bit-level 
operators of the C language are available for macro expressions, plus 
boolean comparisons (\c
.B \=\=
and
.B !\=\c
),
.B &&
(logical AND),
.B ||
(logical OR), and
.B !\c
(logical NOT), plus string comparisons (for example, 
.I (ABC < CD)
evaluates to 
.I 1\c
) and concatenation (simply by writing the strings or macro symbols
adjacent to one another.) 
.sp
When both operands of an operation can be interpreted as numbers, 
then the operator is interpreted as arithmetic; if one or both of the 
operands cannot be interpreted as a number, then a string operator is 
applied. If in the latter case the operator is not applicable to strings, 
then a syntax error is flagged.
.sp
Operator precedence is similar to that of the C language; when in 
doubt, use parentheses.
.sp
Macro symbol definition is strictly separated from macro symbol 
usage.
.br
The only way to
.I define 
a macro symbol is by the SET directive.
.br
The only way to 
.I use
a macro symbol is by enclosing the symbol name in backquotes
(i.e. 
.BI \`\| "macrosym" \|\`\c
). There may be no whitespace between the two delimiting backquotes. 
.br
Macro symbol usage may occur in the
.I label, operation
or
.I operand
field of the assembly line.
.sp
For example,
.sp
.RB lab "     " "set L1"
.br
.RB opco "    " "set DST"
.br
.RB reg "     " "set R5"
.br
.RB ofst "    " "set 11"
.br
.RB \`lab\` "     " \`opco\` "  " \`reg\`,\|addr+\`ofst\`
.sp
would expand to:
.sp
.RB "L1     DST R5,addr+11"
.br

.SH MACROS

A \`macro\' is a kind of text\-expansion subprogram. Once a macro is
defined, a call to it causes the replacement of its mention with the 
statements that appear in the body of the macro definition.
.br
.Macros can take call arguments.
.br
Here is an example of how to define a macro that takes an argument:
.sp
.BI "        MACRO   " macroname
.br
.RB "            \.\.\."
.br
.RB "            IF \`\|2\|\` \=\= 15"
.br
.RB "                \.\.\."
.br
.RB "            ENDIF"
.br
.RB "            \.\.\."
.br
.BI "        ENDMACRO"
.sp
Notice that the notation 
.BI \` n \`
addresses the
.I n\|\c
th argument given at the macro invocation. Therefore, the 
.B \`\|2\|\`
in the example is replaced with the second argument given at the 
macro invocation.
.br
The total number of arguments given can be interrogated with
.B \`\|#\|\`.
.br
Here is an example of how to invoke the macro previously defined:
.sp
.RB "        macroname 1,15"
.sp
In this example, the IF dependent statements in the macro body are assembled,
because (\`2\` \=\= 15).

.SH LIBRARY MECHANISM

.B as1750
has a very simple library-module mechanism. Define an environment variable
named 
.I AS1750_LIB_PATH
to indicate the path of the directory where all library
modules reside. If an unbound global symbol is detected after assembly of
all files given on the command line, then
.B as1750
will search for a file named like the unbound global, with the extension 
.IR .s ","
in the AS1750_LIB_PATH. Thus, there may be only one library module per
assembler sourcefile. If the AS1750_LIB_PATH variable is undefined,
then 
.B as1750
will seek the sourcefiles for unbound globals in the current directory.
See the example file 
.I \./testfiles/hello\.s
for which the modules 
.I puts\.s
and
.I putchar\.s
are automatically bound.


.SH COPYING
Copyright (c) 1994-1997, Daimler-Benz Aerospace AG, Space Systems Group.
.PP
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.
.PP
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.
.PP
Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be included in
translations approved by Daimler-Benz Aerospace instead of in
the original English.
